// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [admins, syncQueue];
  late final Shape0 admins = Shape0(
    source: i0.VersionedTable(
      entityName: 'admins',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)', 'UNIQUE(phone)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
        _column_14,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 syncQueue = Shape1(
    source: i0.VersionedTable(
      entityName: 'sync_queue',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_6,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_14,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phone =>
      columnsByName['phone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get firstName =>
      columnsByName['first_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get lastName =>
      columnsByName['last_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get avatarUrl =>
      columnsByName['avatar_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<bool> _column_0(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_synced',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_synced" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<DateTime> _column_1(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'deleted_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'sync_action',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_3(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'sync_retry_count',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'sync_error',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_5(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_sync_attempt',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<int> _column_6(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'id',
      aliasedName,
      false,
      hasAutoIncrement: true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'PRIMARY KEY AUTOINCREMENT',
      ),
    );
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'uid',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'phone',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'first_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'last_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'email',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'avatar_url',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_13(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'updated_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<DateTime> _column_14(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'created_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get entityType =>
      columnsByName['entity_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get entityUid =>
      columnsByName['entity_uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get action =>
      columnsByName['action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get payload =>
      columnsByName['payload']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get priority =>
      columnsByName['priority']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get retryCount =>
      columnsByName['retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get error =>
      columnsByName['error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get scheduledAt =>
      columnsByName['scheduled_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<bool> get isProcessed =>
      columnsByName['is_processed']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'entity_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'entity_uid',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'action',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'payload',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_19(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'priority',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_20(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'retry_count',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'error',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_22(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'scheduled_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<bool> _column_23(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_processed',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_processed" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [admins, syncQueue];
  late final Shape2 admins = Shape2(
    source: i0.VersionedTable(
      entityName: 'admins',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)', 'UNIQUE(phone)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_13,
        _column_14,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 syncQueue = Shape1(
    source: i0.VersionedTable(
      entityName: 'sync_queue',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_6,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_14,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phone =>
      columnsByName['phone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get firstName =>
      columnsByName['first_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get lastName =>
      columnsByName['last_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    admins,
    syncQueue,
    roles,
    permissions,
  ];
  late final Shape2 admins = Shape2(
    source: i0.VersionedTable(
      entityName: 'admins',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)', 'UNIQUE(phone)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_13,
        _column_14,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 syncQueue = Shape1(
    source: i0.VersionedTable(
      entityName: 'sync_queue',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_6,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_14,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 roles = Shape3(
    source: i0.VersionedTable(
      entityName: 'roles',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
        _column_14,
        _column_13,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 permissions = Shape4(
    source: i0.VersionedTable(
      entityName: 'permissions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_29,
        _column_24,
        _column_25,
        _column_30,
        _column_31,
        _column_32,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get companyID =>
      columnsByName['company_i_d']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isSystemRole =>
      columnsByName['is_system_role']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isActive =>
      columnsByName['is_active']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_26(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'company_i_d',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<bool> _column_27(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_system_role',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_system_role" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<bool> _column_28(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_active',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_active" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('1'),
    );

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get code =>
      columnsByName['code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get category =>
      columnsByName['category']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get scope =>
      columnsByName['scope']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get roleID =>
      columnsByName['role_i_d']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_29(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'code',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_30(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_31(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'scope',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_32(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'role_i_d',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

final class Schema5 extends i0.VersionedSchema {
  Schema5({required super.database}) : super(version: 5);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    admins,
    syncQueue,
    roles,
    permissions,
    companies,
  ];
  late final Shape2 admins = Shape2(
    source: i0.VersionedTable(
      entityName: 'admins',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)', 'UNIQUE(phone)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_13,
        _column_14,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 syncQueue = Shape1(
    source: i0.VersionedTable(
      entityName: 'sync_queue',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_6,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_14,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 roles = Shape3(
    source: i0.VersionedTable(
      entityName: 'roles',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
        _column_14,
        _column_13,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 permissions = Shape4(
    source: i0.VersionedTable(
      entityName: 'permissions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_29,
        _column_24,
        _column_25,
        _column_30,
        _column_31,
        _column_32,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 companies = Shape5(
    source: i0.VersionedTable(
      entityName: 'companies',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_6,
        _column_7,
        _column_24,
        _column_33,
        _column_34,
        _column_35,
        _column_36,
        _column_37,
        _column_38,
        _column_39,
        _column_40,
        _column_11,
        _column_41,
        _column_42,
        _column_43,
        _column_44,
        _column_45,
        _column_14,
        _column_13,
        _column_1,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get regNo =>
      columnsByName['reg_no']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get cidbNo =>
      columnsByName['cidb_no']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get address =>
      columnsByName['address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get postalCode =>
      columnsByName['postal_code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get city =>
      columnsByName['city']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get state =>
      columnsByName['state']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get country =>
      columnsByName['country']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phone =>
      columnsByName['phone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get website =>
      columnsByName['website']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get companyType =>
      columnsByName['company_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get ownerID =>
      columnsByName['owner_i_d']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get defaultBankAcc =>
      columnsByName['default_bank_acc']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get defaultBankAccType =>
      columnsByName['default_bank_acc_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_33(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'reg_no',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_34(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'cidb_no',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_35(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'address',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_36(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'postal_code',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_37(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'city',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_38(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'state',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_39(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'country',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_40(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'phone',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_41(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'website',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_42(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'company_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_43(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'owner_i_d',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_44(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'default_bank_acc',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_45(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'default_bank_acc_type',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

final class Schema6 extends i0.VersionedSchema {
  Schema6({required super.database}) : super(version: 6);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    admins,
    syncQueue,
    roles,
    permissions,
    companies,
  ];
  late final Shape2 admins = Shape2(
    source: i0.VersionedTable(
      entityName: 'admins',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)', 'UNIQUE(phone)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_13,
        _column_14,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 syncQueue = Shape1(
    source: i0.VersionedTable(
      entityName: 'sync_queue',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_6,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_14,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 roles = Shape3(
    source: i0.VersionedTable(
      entityName: 'roles',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
        _column_14,
        _column_13,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 permissions = Shape4(
    source: i0.VersionedTable(
      entityName: 'permissions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_29,
        _column_24,
        _column_25,
        _column_30,
        _column_31,
        _column_32,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape6 companies = Shape6(
    source: i0.VersionedTable(
      entityName: 'companies',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_6,
        _column_7,
        _column_24,
        _column_33,
        _column_34,
        _column_35,
        _column_36,
        _column_37,
        _column_38,
        _column_39,
        _column_40,
        _column_11,
        _column_41,
        _column_42,
        _column_43,
        _column_44,
        _column_45,
        _column_14,
        _column_13,
        _column_1,
        _column_46,
        _column_47,
        _column_48,
        _column_49,
        _column_50,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get regNo =>
      columnsByName['reg_no']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get cidbNo =>
      columnsByName['cidb_no']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get address =>
      columnsByName['address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get postalCode =>
      columnsByName['postal_code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get city =>
      columnsByName['city']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get state =>
      columnsByName['state']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get country =>
      columnsByName['country']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get phone =>
      columnsByName['phone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get email =>
      columnsByName['email']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get website =>
      columnsByName['website']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get companyType =>
      columnsByName['company_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get ownerID =>
      columnsByName['owner_i_d']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get defaultBankAcc =>
      columnsByName['default_bank_acc']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get defaultBankAccType =>
      columnsByName['default_bank_acc_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get adminRoleUid =>
      columnsByName['admin_role_uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get adminRoleName =>
      columnsByName['admin_role_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get bumiputera =>
      columnsByName['bumiputera']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get einvoiceTinNo =>
      columnsByName['einvoice_tin_no']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get registrationDate =>
      columnsByName['registration_date']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_46(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'admin_role_uid',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_47(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'admin_role_name',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_48(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'bumiputera',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("bumiputera" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<String> _column_49(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'einvoice_tin_no',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_50(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'registration_date',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );

final class Schema7 extends i0.VersionedSchema {
  Schema7({required super.database}) : super(version: 7);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    admins,
    syncQueue,
    roles,
    permissions,
    companies,
    scopeOfWorks,
    workQuantityTypes,
    quantityFields,
    dropdownOptions,
    workEquipments,
    scopeOfWorkEquipments,
  ];
  late final Shape2 admins = Shape2(
    source: i0.VersionedTable(
      entityName: 'admins',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)', 'UNIQUE(phone)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_13,
        _column_14,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 syncQueue = Shape1(
    source: i0.VersionedTable(
      entityName: 'sync_queue',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_6,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_14,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 roles = Shape3(
    source: i0.VersionedTable(
      entityName: 'roles',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
        _column_14,
        _column_13,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 permissions = Shape4(
    source: i0.VersionedTable(
      entityName: 'permissions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_29,
        _column_24,
        _column_25,
        _column_30,
        _column_31,
        _column_32,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape6 companies = Shape6(
    source: i0.VersionedTable(
      entityName: 'companies',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_6,
        _column_7,
        _column_24,
        _column_33,
        _column_34,
        _column_35,
        _column_36,
        _column_37,
        _column_38,
        _column_39,
        _column_40,
        _column_11,
        _column_41,
        _column_42,
        _column_43,
        _column_44,
        _column_45,
        _column_14,
        _column_13,
        _column_1,
        _column_46,
        _column_47,
        _column_48,
        _column_49,
        _column_50,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape7 scopeOfWorks = Shape7(
    source: i0.VersionedTable(
      entityName: 'scope_of_works',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_29,
        _column_51,
        _column_52,
        _column_14,
        _column_13,
        _column_26,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape8 workQuantityTypes = Shape8(
    source: i0.VersionedTable(
      entityName: 'work_quantity_types',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_29,
        _column_53,
        _column_54,
        _column_55,
        _column_56,
        _column_57,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape9 quantityFields = Shape9(
    source: i0.VersionedTable(
      entityName: 'quantity_fields',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_29,
        _column_58,
        _column_59,
        _column_60,
        _column_53,
        _column_61,
        _column_62,
        _column_63,
        _column_64,
        _column_65,
        _column_66,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape10 dropdownOptions = Shape10(
    source: i0.VersionedTable(
      entityName: 'dropdown_options',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_67,
        _column_53,
        _column_68,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape11 workEquipments = Shape11(
    source: i0.VersionedTable(
      entityName: 'work_equipments',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_29,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape12 scopeOfWorkEquipments = Shape12(
    source: i0.VersionedTable(
      entityName: 'scope_of_work_equipments',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(scope_of_work_id, work_equipment_id)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_57,
        _column_69,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get code =>
      columnsByName['code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get allowMultipleQuantities =>
      columnsByName['allow_multiple_quantities']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get companyID =>
      columnsByName['company_i_d']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_51(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_52(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'allow_multiple_quantities',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("allow_multiple_quantities" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get code =>
      columnsByName['code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get displayOrder =>
      columnsByName['display_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get hasSegmentBreakdown =>
      columnsByName['has_segment_breakdown']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get segmentSize =>
      columnsByName['segment_size']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get maxSegmentLength =>
      columnsByName['max_segment_length']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get scopeOfWorkId =>
      columnsByName['scope_of_work_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_53(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'display_order',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<bool> _column_54(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'has_segment_breakdown',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("has_segment_breakdown" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_55(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'segment_size',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_56(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'max_segment_length',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_57(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'scope_of_work_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get code =>
      columnsByName['code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get fieldType =>
      columnsByName['field_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get unit =>
      columnsByName['unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get validationRules =>
      columnsByName['validation_rules']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get displayOrder =>
      columnsByName['display_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isRequired =>
      columnsByName['is_required']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isForSegment =>
      columnsByName['is_for_segment']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get defaultValue =>
      columnsByName['default_value']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get placeholder =>
      columnsByName['placeholder']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get helpText =>
      columnsByName['help_text']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get workQuantityTypeId =>
      columnsByName['work_quantity_type_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_58(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'field_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_59(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'unit',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_60(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'validation_rules',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_61(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_required',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_required" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<bool> _column_62(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_for_segment',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_for_segment" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<String> _column_63(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'default_value',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_64(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'placeholder',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_65(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'help_text',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_66(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'work_quantity_type_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

class Shape10 extends i0.VersionedTable {
  Shape10({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get value =>
      columnsByName['value']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get displayOrder =>
      columnsByName['display_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get quantityFieldId =>
      columnsByName['quantity_field_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_67(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'value',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_68(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'quantity_field_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

class Shape11 extends i0.VersionedTable {
  Shape11({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get code =>
      columnsByName['code']! as i1.GeneratedColumn<String>;
}

class Shape12 extends i0.VersionedTable {
  Shape12({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get scopeOfWorkId =>
      columnsByName['scope_of_work_id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get workEquipmentId =>
      columnsByName['work_equipment_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_69(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'work_equipment_id',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

final class Schema8 extends i0.VersionedSchema {
  Schema8({required super.database}) : super(version: 8);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    admins,
    syncQueue,
    roles,
    permissions,
    companies,
    workScopes,
    workQuantityTypes,
    workQuantityFields,
    workQuantityFieldOptions,
    workScopeEquipments,
    workScopeEquipment,
  ];
  late final Shape2 admins = Shape2(
    source: i0.VersionedTable(
      entityName: 'admins',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)', 'UNIQUE(phone)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_13,
        _column_14,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 syncQueue = Shape1(
    source: i0.VersionedTable(
      entityName: 'sync_queue',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_6,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
        _column_21,
        _column_14,
        _column_22,
        _column_23,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 roles = Shape3(
    source: i0.VersionedTable(
      entityName: 'roles',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
        _column_14,
        _column_13,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 permissions = Shape4(
    source: i0.VersionedTable(
      entityName: 'permissions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: [],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_29,
        _column_24,
        _column_25,
        _column_30,
        _column_31,
        _column_32,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape6 companies = Shape6(
    source: i0.VersionedTable(
      entityName: 'companies',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_6,
        _column_7,
        _column_24,
        _column_33,
        _column_34,
        _column_35,
        _column_36,
        _column_37,
        _column_38,
        _column_39,
        _column_40,
        _column_11,
        _column_41,
        _column_42,
        _column_43,
        _column_44,
        _column_45,
        _column_14,
        _column_13,
        _column_1,
        _column_46,
        _column_47,
        _column_48,
        _column_49,
        _column_50,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape7 workScopes = Shape7(
    source: i0.VersionedTable(
      entityName: 'work_scopes',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_29,
        _column_51,
        _column_52,
        _column_14,
        _column_13,
        _column_26,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape13 workQuantityTypes = Shape13(
    source: i0.VersionedTable(
      entityName: 'work_quantity_types',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_29,
        _column_53,
        _column_54,
        _column_55,
        _column_56,
        _column_70,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape14 workQuantityFields = Shape14(
    source: i0.VersionedTable(
      entityName: 'work_quantity_fields',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_29,
        _column_58,
        _column_59,
        _column_60,
        _column_53,
        _column_61,
        _column_62,
        _column_63,
        _column_64,
        _column_65,
        _column_71,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape15 workQuantityFieldOptions = Shape15(
    source: i0.VersionedTable(
      entityName: 'work_quantity_field_options',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_67,
        _column_53,
        _column_72,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape11 workScopeEquipments = Shape11(
    source: i0.VersionedTable(
      entityName: 'work_scope_equipments',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(uid)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_7,
        _column_24,
        _column_29,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape16 workScopeEquipment = Shape16(
    source: i0.VersionedTable(
      entityName: 'work_scope_equipment',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['UNIQUE(work_scope_i_d, work_equipment_i_d)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
        _column_6,
        _column_70,
        _column_73,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape13 extends i0.VersionedTable {
  Shape13({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get code =>
      columnsByName['code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get displayOrder =>
      columnsByName['display_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get hasSegmentBreakdown =>
      columnsByName['has_segment_breakdown']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get segmentSize =>
      columnsByName['segment_size']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get maxSegmentLength =>
      columnsByName['max_segment_length']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get workScopeID =>
      columnsByName['work_scope_i_d']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_70(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'work_scope_i_d',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

class Shape14 extends i0.VersionedTable {
  Shape14({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get code =>
      columnsByName['code']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get fieldType =>
      columnsByName['field_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get unit =>
      columnsByName['unit']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get validationRules =>
      columnsByName['validation_rules']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get displayOrder =>
      columnsByName['display_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isRequired =>
      columnsByName['is_required']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isForSegment =>
      columnsByName['is_for_segment']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get defaultValue =>
      columnsByName['default_value']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get placeholder =>
      columnsByName['placeholder']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get helpText =>
      columnsByName['help_text']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get quantityTypeID =>
      columnsByName['quantity_type_i_d']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_71(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'quantity_type_i_d',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

class Shape15 extends i0.VersionedTable {
  Shape15({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get uid =>
      columnsByName['uid']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get value =>
      columnsByName['value']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get displayOrder =>
      columnsByName['display_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get fieldID =>
      columnsByName['field_i_d']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_72(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'field_i_d',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

class Shape16 extends i0.VersionedTable {
  Shape16({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<bool> get isSynced =>
      columnsByName['is_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get syncAction =>
      columnsByName['sync_action']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncRetryCount =>
      columnsByName['sync_retry_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get syncError =>
      columnsByName['sync_error']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get lastSyncAttempt =>
      columnsByName['last_sync_attempt']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get workScopeID =>
      columnsByName['work_scope_i_d']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get workEquipmentID =>
      columnsByName['work_equipment_i_d']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_73(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'work_equipment_i_d',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
  required Future<void> Function(i1.Migrator m, Schema6 schema) from5To6,
  required Future<void> Function(i1.Migrator m, Schema7 schema) from6To7,
  required Future<void> Function(i1.Migrator m, Schema8 schema) from7To8,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      case 4:
        final schema = Schema5(database: database);
        final migrator = i1.Migrator(database, schema);
        await from4To5(migrator, schema);
        return 5;
      case 5:
        final schema = Schema6(database: database);
        final migrator = i1.Migrator(database, schema);
        await from5To6(migrator, schema);
        return 6;
      case 6:
        final schema = Schema7(database: database);
        final migrator = i1.Migrator(database, schema);
        await from6To7(migrator, schema);
        return 7;
      case 7:
        final schema = Schema8(database: database);
        final migrator = i1.Migrator(database, schema);
        await from7To8(migrator, schema);
        return 8;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
  required Future<void> Function(i1.Migrator m, Schema5 schema) from4To5,
  required Future<void> Function(i1.Migrator m, Schema6 schema) from5To6,
  required Future<void> Function(i1.Migrator m, Schema7 schema) from6To7,
  required Future<void> Function(i1.Migrator m, Schema8 schema) from7To8,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(
    from1To2: from1To2,
    from2To3: from2To3,
    from3To4: from3To4,
    from4To5: from4To5,
    from5To6: from5To6,
    from6To7: from6To7,
    from7To8: from7To8,
  ),
);
